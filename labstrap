#!/bin/bash

set -e

BASE="$(dirname "$0")"
SRC="$BASE/rootfs"
DST=/target
INPUT=/input.tar.gz
cd "$BASE"
. ./variables

run() {
  chroot "$DST" "$@"
}

add_file() {
  while [ "$#" -ne 0 ]; do
    rsync -rlp "$SRC/$1" "$DST/$1"
    shift
  done
}

add_package() {
  DEBIAN_FRONTEND=noninteractive run apt-get install -y --no-install-recommends "$@"
}

remove_package() {
  DEBIAN_FRONTEND=noninteractive run apt-get purge -y --autoremove "$@"
}

if test "$(ls -1A "$DST" | wc -l)" -ne 0; then
  echo "Target directory is not empty!" >&2
  exit 1
fi

tar axf "$INPUT" -C "$DST" $TAR_FLAGS

mount_all() {
  mount -t tmpfs none "$DST/dev"
  chmod 755 "$DST/dev"
  mknod -m0666 "$DST/dev/null" c 1 3
  mknod -m0666 "$DST/dev/random" c 1 8
  mknod -m0666 "$DST/dev/urandom" c 1 9
  mknod -m0666 "$DST/dev/zero" c 1 5
  ln -sf /proc/self/fd/0 "$DST/dev/stdin"
  ln -sf /proc/self/fd/1 "$DST/dev/stdout"
  ln -sf /proc/self/fd/2 "$DST/dev/stderr"
  mkdir -p "$DST/dev/pts"
  mount -t devpts none "$DST/dev/pts"
  mount -t proc proc "$DST/proc"
  mount -t tmpfs none "$DST/run"
  mount -t sysfs sys "$DST/sys"
  mount -t tmpfs none "$DST/tmp"
}

umount_all() {
  umount "$DST/dev/pts"
  umount "$DST/dev"
  umount "$DST/proc"
  umount "$DST/run"
  umount "$DST/sys"
  umount "$DST/tmp"
}

mount_all
trap umount_all EXIT

# Preliminary cleanup
run sh -c 'dpkg --get-selections | cut -f1 | xargs apt-mark auto'

rm -f "$DST/etc/resolv.conf"
cp -f /etc/resolv.conf "$DST/etc/resolv.conf"
add_file /etc/apt/
run apt-get update
run apt-get -y dist-upgrade

# Install everything
add_package \
  fcitx-module-cloudpinyin fcitx-pinyin fcitx-sunpinyin \
  fcitx-table-wubi fcitx-ui-qimpanel fcitx-config-gtk \
  fcitx-frontend-all fcitx-frontend-gtk2 fcitx-frontend-gtk3 fcitx-frontend-qt5 \
  firefox fonts-droid-fallback firefox-locale-zh-hans language-pack-zh-hans texmaker \
  mate-tweak ubuntu-mate-core ubuntu-minimal xserver-xorg slick-greeter ubuntu-mate-wallpapers \
  caja-open-terminal libncurses5 \
  bash-completion command-not-found cron curl dnsutils htop manpages-dev net-tools ssh usrmerge vim wget \
  indicator-application indicator-session indicator-datetime indicator-notifications \
  ssl-cert lrzsz \
  vlab-vnc vlab-earlyoom

# Regional settings (time & language)
ln -sf /usr/share/zoneinfo/Asia/Shanghai "$DST/etc/localtime"
run dpkg-reconfigure --frontend noninteractive tzdata
add_file /etc/locale.gen /etc/default/locale
rm -rf "$DST/var/lib/locales/supported.d"
run locale-gen

# Root user
add_file /root/

# User profile (including dconf)
add_file /etc/skel/ /tmp/dconf/
mkdir -p "$DST"/etc/skel/.config/dconf
mkdir -p "$DST"/etc/skel/{Desktop,Downloads,Documents}
run dconf compile /etc/skel/.config/dconf/user /tmp/dconf/

# Disable dist-upgrade notification
add_file /etc/update-manager/

# Directory file
add_file /usr/share/desktop-directories/

# Regular user
run adduser --disabled-password --gecos "" ubuntu
run usermod -aG sudo ubuntu
run passwd -d ubuntu

# Vlab Startup
add_file /etc/systemd/system
run systemctl enable vlab-startup.service

# Vlab SSH
add_file /etc/ssh/

# Vlab version info
VLAB_VERSION="$(date +%y%m%d)"
if [ -n "$GITHUB_RUN_NUMBER" ]; then
  VLAB_VERSION="$VLAB_VERSION-gh-$GITHUB_RUN_NUMBER"
fi
FILE="$DST"/etc/vlab_version
echo "VLAB_DISTRO=ubuntu" > "$FILE"
echo "VLAB_VERSION=$VLAB_VERSION" >> "$FILE"
chmod 444 "$FILE"

# Networking (for systemd-nspawn testing environment)
run systemctl enable systemd-networkd

# Prevent containers from thrusting I/O
run systemctl disable man-db.timer
run systemctl disable apt-daily-upgrade.timer

# Fix ping capabilities
setcap cap_net_raw=ep "$DST/usr/bin/ping"

# Cleanup
remove_package -o 'APT::AutoRemove::SuggestsImportant=false' apparmor dosfstools ed postfix strace tcpdump \
  telnet ufw usrmerge wpasupplicant pulseaudio cups cups-browsed cups-client cups-common cups-core-drivers \
  cups-daemon cups-filters cups-filters-core-drivers cups-ipp-utils cups-pk-helper cups-ppdc cups-server-common \
  mysql-common gstreamer1.0-pulseaudio pulseaudio-utils wireless-tools
run apt-mark auto bash-completion cron wget
run apt-get clean
rm -rf "$DST/var/lib/apt/lists"/* "$DST/var/lib/dpkg"/*-old
rm -rf "$DST/var/cache"/*
rm "$DST/etc/resolv.conf"
rm -rf "$DST/etc/ssh"/ssh_host_*_key{,.pub}
